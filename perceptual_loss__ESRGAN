# 3.4. Perceptual Loss (During Training):



import torch
import torch.nn as nn
from torchvision.models import vgg19

class VGGFeatureExtractor(nn.Module):
    def __init__(self):
        super(VGGFeatureExtractor, self).__init__()
        vgg = vgg19(pretrained=True).features
        self.layers = nn.Sequential()
        for i, layer in enumerate(list(vgg)[:35]):  # Extract features up to relu4_3
            self.layers.add_module(str(i), layer)

    def forward(self, x):
        return self.layers(x)

class PerceptualLoss(nn.Module):
    def __init__(self):
        super(PerceptualLoss, self).__init__()
        self.feature_extractor = VGGFeatureExtractor()
        self.criterion = nn.MSELoss()

    def forward(self, sr, hr):
        sr_features = self.feature_extractor(sr)
        hr_features = self.feature_extractor(hr)
        return self.criterion(sr_features, hr_features)

# Example usage
sr_image = torch.randn(1, 3, 256, 256)  # Super-resolved image
hr_image = torch.randn(1, 3, 256, 256)  # High-resolution ground truth image
loss_fn = PerceptualLoss()
perceptual_loss = loss_fn(sr_image, hr_image)
